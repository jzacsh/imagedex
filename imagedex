#!/usr/bin/env python2

# imagedex: https://github.com/jzacsh/imagedex

import os
import sys
from optparse import OptionParser
import simplejson as json
import io

def indexer(path, white):
    """Return a listing of filesystem {path}, optionally only including files
    who's extension is in {white}."""

    listing = os.listdir(path)

    if white:
        approved = []
        for name in listing:
            if name.split('.').pop() in white:
                approved.append(name)
        return approved
    else:
        return listing

def main():
    parser = OptionParser(usage='%prog [options] PATH')
    parser.add_option('-f', '--file', dest='outf',
        help="File you'd like your JSON index written to.")
    parser.add_option('-p', '--prefix', dest='prefix', default='',
        help="Prefix you'd like to utilize for the file paths.")
    parser.add_option('-w', '--white', dest='white',
        help="Whitelist of file extensions you'd like exclusively included, comma-delimited.")
    parser.add_option('-n', '--var', dest='var', default='imagedex',
        help="Javascript variable you'd like the JSON assigned to for proper namespacing")
    (opts, args) = parser.parse_args()

    #sanity check
    if (len(args) != 1 or
    not os.path.isdir(args[0]) or
    not os.access(args[0], os.R_OK)):
        err = 'You must pass a readable directory, PATH, to be indexed.'
        parser.error(err)
        sys.exit(1)

    #digest our white list
    if opts.white:
        white = opts.white.lower().split(',')
    else:
        white = opts.white.lower()

    #get an actual index of requested path
    origindex = indexer(args[0], white)
    if origindex:
        index = 'var ' + opts.var + ' = ' #proper js
        index += json.dumps([ opts.prefix + path for path in origindex ])
        index += ';' #proper js
    else:
        index = ''

    #finally output data as JSON
    if opts.outf:
        if os.path.isfile(opts.outf) and not os.access(opts.outf, os.W_OK):
            err = """File "{0}" already exists and is not writeable.\n""".format(
                    opts.outf)
            sys.stderr.write(err)
            sys.exit(2)

        f = io.FileIO(opts.outf, 'w')
        f.write(index)
        f.close()
    else:
        print index

if __name__ == '__main__':
    main()

# vim: et:ts=4:sw=4:sts=4
